/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Class Project
 * @export
 * @interface ProjectPostRead
 */
export interface ProjectPostRead {
    /**
     * 
     * @type {number}
     * @memberof ProjectPostRead
     */
    id?: number;
    /**
     * A name property - this is the name of the Project.
     * @type {string}
     * @memberof ProjectPostRead
     */
    name: string;
}

/**
 * Class Project
 * @export
 * @interface ProjectRead
 */
export interface ProjectRead {
    /**
     * 
     * @type {number}
     * @memberof ProjectRead
     */
    id?: number;
    /**
     * One Project has many Tasks
     * @type {Array<string>}
     * @memberof ProjectRead
     */
    tasks?: Array<string>;
    /**
     * A name property - this is the name of the Project.
     * @type {string}
     * @memberof ProjectRead
     */
    name: string;
}

/**
 * Class Project
 * @export
 * @interface ProjectWrite
 */
export interface ProjectWrite {
    /**
     * A name property - this is the name of the Project.
     * @type {string}
     * @memberof ProjectWrite
     */
    name: string;
}

/**
 * Class Task
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    id?: number;
    /**
     * A title property - this is the title of the Task.
     * @type {string}
     * @memberof Task
     */
    title: string;
    /**
     * Many Tasks have one Project.
     * @type {string}
     * @memberof Task
     */
    project?: string;
}

/**
 * Class Task
 * @export
 * @interface TaskWrite
 */
export interface TaskWrite {
    /**
     * A title property - this is the title of the Task.
     * @type {string}
     * @memberof TaskWrite
     */
    title: string;
    /**
     * Many Tasks have one Project.
     * @type {string}
     * @memberof TaskWrite
     */
    project?: string;
}


/**
 * JWTApi - fetch parameter creator
 * @export
 */
export const JWTApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Invalidate JWT Refresh token.
         * @param {string} refreshToken Refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenInvalidatePost(refreshToken: string, options: any = {}): FetchArgs {
            // verify required parameter 'refreshToken' is not null or undefined
            if (refreshToken === null || refreshToken === undefined) {
                throw new RequiredError('refreshToken','Required parameter refreshToken was null or undefined when calling apiTokenInvalidatePost.');
            }
            const localVarPath = `/api/token/invalidate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (refreshToken !== undefined) {
                localVarFormParams.set('refresh_token', refreshToken as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns JWT token.
         * @param {string} username User email
         * @param {string} password User password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenPost(username: string, password: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling apiTokenPost.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling apiTokenPost.');
            }
            const localVarPath = `/api/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (username !== undefined) {
                localVarFormParams.set('_username', username as any);
            }

            if (password !== undefined) {
                localVarFormParams.set('_password', password as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh JWT token.
         * @param {string} refreshToken Refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenRefreshPost(refreshToken: string, options: any = {}): FetchArgs {
            // verify required parameter 'refreshToken' is not null or undefined
            if (refreshToken === null || refreshToken === undefined) {
                throw new RequiredError('refreshToken','Required parameter refreshToken was null or undefined when calling apiTokenRefreshPost.');
            }
            const localVarPath = `/api/token/refresh`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (refreshToken !== undefined) {
                localVarFormParams.set('refresh_token', refreshToken as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JWTApi - functional programming interface
 * @export
 */
export const JWTApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Invalidate JWT Refresh token.
         * @param {string} refreshToken Refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenInvalidatePost(refreshToken: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = JWTApiFetchParamCreator(configuration).apiTokenInvalidatePost(refreshToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns JWT token.
         * @param {string} username User email
         * @param {string} password User password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenPost(username: string, password: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = JWTApiFetchParamCreator(configuration).apiTokenPost(username, password, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Refresh JWT token.
         * @param {string} refreshToken Refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenRefreshPost(refreshToken: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = JWTApiFetchParamCreator(configuration).apiTokenRefreshPost(refreshToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * JWTApi - factory interface
 * @export
 */
export const JWTApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Invalidate JWT Refresh token.
         * @param {string} refreshToken Refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenInvalidatePost(refreshToken: string, options?: any) {
            return JWTApiFp(configuration).apiTokenInvalidatePost(refreshToken, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns JWT token.
         * @param {string} username User email
         * @param {string} password User password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenPost(username: string, password: string, options?: any) {
            return JWTApiFp(configuration).apiTokenPost(username, password, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Refresh JWT token.
         * @param {string} refreshToken Refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenRefreshPost(refreshToken: string, options?: any) {
            return JWTApiFp(configuration).apiTokenRefreshPost(refreshToken, options)(fetch, basePath);
        },
    };
};

/**
 * JWTApi - object-oriented interface
 * @export
 * @class JWTApi
 * @extends {BaseAPI}
 */
export class JWTApi extends BaseAPI {
    /**
     * 
     * @summary Invalidate JWT Refresh token.
     * @param {string} refreshToken Refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JWTApi
     */
    public apiTokenInvalidatePost(refreshToken: string, options?: any) {
        return JWTApiFp(this.configuration).apiTokenInvalidatePost(refreshToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns JWT token.
     * @param {string} username User email
     * @param {string} password User password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JWTApi
     */
    public apiTokenPost(username: string, password: string, options?: any) {
        return JWTApiFp(this.configuration).apiTokenPost(username, password, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Refresh JWT token.
     * @param {string} refreshToken Refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JWTApi
     */
    public apiTokenRefreshPost(refreshToken: string, options?: any) {
        return JWTApiFp(this.configuration).apiTokenRefreshPost(refreshToken, options)(this.fetch, this.basePath);
    }

}

/**
 * ProjectApi - fetch parameter creator
 * @export
 */
export const ProjectApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Task resources.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsTasksGetSubresource(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiProjectsTasksGetSubresource.');
            }
            const localVarPath = `/api/projects/{id}/tasks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes the Project resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProjectItem.');
            }
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of Project resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectCollection(page?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/projects`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a Project resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProjectItem.');
            }
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a Project resource.
         * @param {ProjectWrite} [project] The new Project resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectCollection(project?: ProjectWrite, options: any = {}): FetchArgs {
            const localVarPath = `/api/projects`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProjectWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(project || {}) : (project || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replaces the Project resource.
         * @param {string} id 
         * @param {ProjectWrite} [project] The updated Project resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectItem(id: string, project?: ProjectWrite, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putProjectItem.');
            }
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProjectWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(project || {}) : (project || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Task resources.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsTasksGetSubresource(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Task>> {
            const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).apiProjectsTasksGetSubresource(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Removes the Project resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).deleteProjectItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of Project resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectCollection(page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ProjectRead>> {
            const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).getProjectCollection(page, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a Project resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectRead> {
            const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).getProjectItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a Project resource.
         * @param {ProjectWrite} [project] The new Project resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectCollection(project?: ProjectWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectPostRead> {
            const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).postProjectCollection(project, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Replaces the Project resource.
         * @param {string} id 
         * @param {ProjectWrite} [project] The updated Project resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectItem(id: string, project?: ProjectWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectPostRead> {
            const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).putProjectItem(id, project, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Task resources.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsTasksGetSubresource(id: string, options?: any) {
            return ProjectApiFp(configuration).apiProjectsTasksGetSubresource(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Removes the Project resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectItem(id: string, options?: any) {
            return ProjectApiFp(configuration).deleteProjectItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of Project resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectCollection(page?: number, options?: any) {
            return ProjectApiFp(configuration).getProjectCollection(page, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a Project resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectItem(id: string, options?: any) {
            return ProjectApiFp(configuration).getProjectItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a Project resource.
         * @param {ProjectWrite} [project] The new Project resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectCollection(project?: ProjectWrite, options?: any) {
            return ProjectApiFp(configuration).postProjectCollection(project, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Replaces the Project resource.
         * @param {string} id 
         * @param {ProjectWrite} [project] The updated Project resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectItem(id: string, project?: ProjectWrite, options?: any) {
            return ProjectApiFp(configuration).putProjectItem(id, project, options)(fetch, basePath);
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves the collection of Task resources.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectsTasksGetSubresource(id: string, options?: any) {
        return ProjectApiFp(this.configuration).apiProjectsTasksGetSubresource(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Removes the Project resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public deleteProjectItem(id: string, options?: any) {
        return ProjectApiFp(this.configuration).deleteProjectItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of Project resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectCollection(page?: number, options?: any) {
        return ProjectApiFp(this.configuration).getProjectCollection(page, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a Project resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectItem(id: string, options?: any) {
        return ProjectApiFp(this.configuration).getProjectItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a Project resource.
     * @param {ProjectWrite} [project] The new Project resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public postProjectCollection(project?: ProjectWrite, options?: any) {
        return ProjectApiFp(this.configuration).postProjectCollection(project, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Replaces the Project resource.
     * @param {string} id 
     * @param {ProjectWrite} [project] The updated Project resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public putProjectItem(id: string, project?: ProjectWrite, options?: any) {
        return ProjectApiFp(this.configuration).putProjectItem(id, project, options)(this.fetch, this.basePath);
    }

}

/**
 * TaskApi - fetch parameter creator
 * @export
 */
export const TaskApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Task resources.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsTasksGetSubresource(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiProjectsTasksGetSubresource.');
            }
            const localVarPath = `/api/projects/{id}/tasks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes the Task resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTaskItem.');
            }
            const localVarPath = `/api/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of Task resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskCollection(page?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/tasks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a Task resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTaskItem.');
            }
            const localVarPath = `/api/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a Task resource.
         * @param {TaskWrite} [task] The new Task resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTaskCollection(task?: TaskWrite, options: any = {}): FetchArgs {
            const localVarPath = `/api/tasks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TaskWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(task || {}) : (task || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replaces the Task resource.
         * @param {string} id 
         * @param {Task} [task] The updated Task resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTaskItem(id: string, task?: Task, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putTaskItem.');
            }
            const localVarPath = `/api/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Task" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(task || {}) : (task || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Task resources.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsTasksGetSubresource(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Task>> {
            const localVarFetchArgs = TaskApiFetchParamCreator(configuration).apiProjectsTasksGetSubresource(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Removes the Task resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TaskApiFetchParamCreator(configuration).deleteTaskItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of Task resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskCollection(page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Task>> {
            const localVarFetchArgs = TaskApiFetchParamCreator(configuration).getTaskCollection(page, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a Task resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Task> {
            const localVarFetchArgs = TaskApiFetchParamCreator(configuration).getTaskItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a Task resource.
         * @param {TaskWrite} [task] The new Task resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTaskCollection(task?: TaskWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Task> {
            const localVarFetchArgs = TaskApiFetchParamCreator(configuration).postTaskCollection(task, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Replaces the Task resource.
         * @param {string} id 
         * @param {Task} [task] The updated Task resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTaskItem(id: string, task?: Task, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Task> {
            const localVarFetchArgs = TaskApiFetchParamCreator(configuration).putTaskItem(id, task, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Task resources.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsTasksGetSubresource(id: string, options?: any) {
            return TaskApiFp(configuration).apiProjectsTasksGetSubresource(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Removes the Task resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskItem(id: string, options?: any) {
            return TaskApiFp(configuration).deleteTaskItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of Task resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskCollection(page?: number, options?: any) {
            return TaskApiFp(configuration).getTaskCollection(page, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a Task resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskItem(id: string, options?: any) {
            return TaskApiFp(configuration).getTaskItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a Task resource.
         * @param {TaskWrite} [task] The new Task resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTaskCollection(task?: TaskWrite, options?: any) {
            return TaskApiFp(configuration).postTaskCollection(task, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Replaces the Task resource.
         * @param {string} id 
         * @param {Task} [task] The updated Task resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTaskItem(id: string, task?: Task, options?: any) {
            return TaskApiFp(configuration).putTaskItem(id, task, options)(fetch, basePath);
        },
    };
};

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves the collection of Task resources.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiProjectsTasksGetSubresource(id: string, options?: any) {
        return TaskApiFp(this.configuration).apiProjectsTasksGetSubresource(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Removes the Task resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public deleteTaskItem(id: string, options?: any) {
        return TaskApiFp(this.configuration).deleteTaskItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of Task resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getTaskCollection(page?: number, options?: any) {
        return TaskApiFp(this.configuration).getTaskCollection(page, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a Task resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getTaskItem(id: string, options?: any) {
        return TaskApiFp(this.configuration).getTaskItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a Task resource.
     * @param {TaskWrite} [task] The new Task resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public postTaskCollection(task?: TaskWrite, options?: any) {
        return TaskApiFp(this.configuration).postTaskCollection(task, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Replaces the Task resource.
     * @param {string} id 
     * @param {Task} [task] The updated Task resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public putTaskItem(id: string, task?: Task, options?: any) {
        return TaskApiFp(this.configuration).putTaskItem(id, task, options)(this.fetch, this.basePath);
    }

}

